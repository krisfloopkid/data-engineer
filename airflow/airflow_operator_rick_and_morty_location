"""
 Собирает топ локаций сериала "Рик и Морти" по количеству резидентов
"""

from airflow import AirflowException
from airflow.models.baseoperator import BaseOperator
import logging
import requests
import pandas as pd

class KMRaMLocationOperator(BaseOperator):

    api_url = 'https://rickandmortyapi.com/api/location'
    template_fields = ('top_location', 'csv_path',)
    ui_color = "#b6d7a8"

    def __init__(self, top_location: int = 3, csv_path: str = '/tmp/top_location.csv', **kwargs)-> None:
        super().__init__(**kwargs)
        self.top_location = top_location
        self.csv_path = csv_path

    def get_df_location(self):
        r = requests.get(self.api_url)
        if r.status_code == 200:
            logging.info("SUCCESS")
            location_data = []
            for row in r.json()['results']:
                location_data.append(dict(
                    id=row['id'],
                    name=row['name'],
                    type=row['type'],
                    dimension=row['dimension'],
                    resident_cnt=len(row['residents'])))
            df = pd.DataFrame(location_data)
            df.astype({'id': 'int64'})
            df.drop_duplicates(subset=['name'], inplace=True)
            logging.info(df)
            return df
        else:
            logging.warning("HTTP STATUS {}".format(r.status_code))
            raise AirflowException('Error in load page count')

    def get_top_location_resident(self, df):
       return df.sort_values(ascending=False, by='resident_cnt').head(self.top_location)

    def execute(self, context):
        df = self.get_df_location()
        df_sorted = self.get_top_location_resident(df)
        logging.info(f'Top {self.top_location} location with number of residents: \n{df_sorted}')
        df_sorted.to_csv(self.csv_path, index=False, header=False)
